services:
  backend:
    container_name: 'backend'
    build:
      context: ./backend
      dockerfile: Dockerfile
      cache_from:
          - '${BACKEND_IMAGE}'
    image: '${BACKEND_IMAGE}'
    environment:
      - MONGO_URI=${MONGO_URI}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_ACCESS_EXPIRATION=${JWT_ACCESS_EXPIRATION}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    ports:
      - "8000:8000"
    depends_on:
      - mongo
      - redis
    networks:
      - chat-network
    restart: always  

  mongo:
    container_name: 'db'
    image: mongo:latest
    volumes:
      - ./docker/mongodb:/data/db
    networks:
      - chat-network
    restart: always

  redis:
    container_name: 'redis'
    image: redis
    ports:
      - "27017:27017"
    networks:
      - chat-network
    restart: always

  worker:
    container_name: 'worker'
    build: ./backend
    environment:
      - MONGO_URI=${MONGO_URI}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    command: ["node", "worker.js"]
    depends_on:
      - mongo
      - redis
    networks:
      - chat-network
    
  frontend:
    container_name: 'frontend'
    image: '${FRONTEND_IMAGE}'
    env_file:
      - .env
    ports:
      - "3000:3000"
    depends_on:
      - backend
      - mongo
      - redis
      - worker
    networks:
      - chat-network
    restart: always

  nginx:
    container_name: 'nginx'
    image: nginx
    depends_on:
      - frontend
    volumes:
      - ./frontend/dist:/usr/share/nginx/html/
    ports:
      - '80:80'
    restart: always
    networks:
      - chat-network
  
networks:
  chat-network:
    driver: bridge

