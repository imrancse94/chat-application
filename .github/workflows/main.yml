name: Continuous Integration and Delivery

on:
  push:
    branches: [main]

env:
  BACKEND_IMAGE: ghcr.io/${{ secrets.NAMESPACE }}/chat-application-backend:latest
  FRONTEND_IMAGE: ghcr.io/${{ secrets.NAMESPACE }}/ghcr.io/imrancse94/chat-application-frontend:latest
  FRONTEND_PUSH_IMAGE: ghcr.io/${{ secrets.NAMESPACE }}/ghcr.io/imrancse94/chat-application-frontend:latest
  MONGO_IMAGE: mongo:latest
  REDIS_IMAGE: redis
  REDIS_HOST: redis
  REDIS_PORT: 6379
  JWT_SECRET: secret@!
  PORT: 8000
  JWT_ACCESS_EXPIRATION: 15m
  JWT_REFRESH_EXPIRATION: 7d
  JWT_REFRESH_SECRET: scret222!!
  MONGO_URI: mongodb://mongo:27017/chatapp
  REGISTRY: ghcr.io

jobs:
  build:
    name: Build the Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Set environment variables to $GITHUB_ENV
        run: |
          echo "FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}" >> $GITHUB_ENV
          echo "BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}" >> $GITHUB_ENV
          echo "REDIS_HOST=${{ env.REDIS_HOST }}" >> $GITHUB_ENV
          echo "REDIS_PORT=${{ env.REDIS_PORT }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> $GITHUB_ENV
          echo "PORT=${{ env.PORT }}" >> $GITHUB_ENV
          echo "JWT_ACCESS_EXPIRATION=${{ env.JWT_ACCESS_EXPIRATION }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_EXPIRATION=${{ env.JWT_REFRESH_EXPIRATION }}" >> $GITHUB_ENV
          echo "JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}" >> $GITHUB_ENV
          echo "MONGO_URI=${{ env.MONGO_URI }}" >> $GITHUB_ENV

      - name: Log in to GitHub Packages
        env:
          PERSONAL_ACCESS_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: echo "${PERSONAL_ACCESS_TOKEN}" | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin

      - name: Pull images
        run: |
          docker pull ${{ env.BACKEND_IMAGE }} || true
          docker pull ${{ env.MONGO_IMAGE }} || true
          docker pull ${{ env.REDIS_IMAGE }} || true
          docker pull nginx || true
          docker pull ${{ env.FRONTEND_IMAGE }} || true

      - name: Build images
        id: build-images
        run: |
          docker compose -f docker-compose.ci.yml build --no-cache 2>error >&1

      - name: Create an issue on failure
        if: ${{ failure() }}
        run: |
          ERROR=$(cat error)
          curl --request POST \
          --url https://api.github.com/repos/${{ github.repository }}/issues \
          --header 'authorization: Bearer ${{ secrets.PERSONAL_ACCESS_TOKEN }}' \
          --header 'content-type: application/json' \
          --data '{
            "title": "Automated issue for commit: ${{ github.job }}",
            "body": "## Description\n\nThis issue was automatically created by the GitHub Action.\n\nThe Job **`${{github.job}}`** of the workflow run **`${{github.run_number}}`** failed with the following error:\n\n`'"$ERROR"'`\n\n## Run details\n\n- Workflow: `${{ github.workflow }}`\n\n- The actor of the run: `${{ github.triggering_actor }}`\n\n- The commit hash was: _${{ github.sha }}_\n\nKindly fix it in the shortest time possible.\n\nThank you."
            }' \
          --fail

      - name: Push images
        run: |
          docker push ${{ env.BACKEND_IMAGE }} || true
          docker push ${{ env.FRONTEND_IMAGE }} || true
          

  checking-secrets:
    name: Checking secrets
    runs-on: ubuntu-latest
    needs: build
    outputs:
      secret_key_exists: ${{steps.check_secrets.outputs.defined}}
    steps:
      - name: Check for Secrets availability
        id: check_secrets
        shell: bash
        run: |
          if [[ -n "${{ secrets.PRIVATE_KEY }}" && -n "${{secrets.AWS_EC2_IP_ADDRESS}}" && -n "${{secrets.AWS_HOST_USER}}" ]]; then
            echo "defined=true" >> $GITHUB_OUTPUT;
          else
            echo "defined=false" >> $GITHUB_OUTPUT;
          fi

  deploy:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: checking-secrets
    if: needs.checking-secrets.outputs.secret_key_exists == 'true'
    steps:
      - name: Checkout main
        uses: actions/checkout@v3

      - name: Create .env file locally in app folder
        run: |
          mkdir -p app
          echo "FRONTEND_IMAGE=${{ env.FRONTEND_IMAGE }}" >> app/.env
          echo "BACKEND_IMAGE=${{ env.BACKEND_IMAGE }}" >> app/.env
          echo "REDIS_HOST=${{ env.REDIS_HOST }}" >> app/.env
          echo "REDIS_PORT=${{ env.REDIS_PORT }}" >> app/.env
          echo "JWT_SECRET=${{ env.JWT_SECRET }}" >> app/.env
          echo "PORT=${{ env.PORT }}" >> app/.env
          echo "JWT_ACCESS_EXPIRATION=${{ env.JWT_ACCESS_EXPIRATION }}" >> app/.env
          echo "JWT_REFRESH_EXPIRATION=${{ env.JWT_REFRESH_EXPIRATION }}" >> app/.env
          echo "JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}" >> app/.env
          echo "MONGO_URI=${{ env.MONGO_URI }}" >> app/.env

      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Deploy images on AWS EC2
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          scp -o StrictHostKeyChecking=no -r ./app/.env ./docker-compose.prod.yml \
            ${{secrets.AWS_HOST_USER}}@${{ secrets.AWS_EC2_IP_ADDRESS }}:/home/${{secrets.AWS_HOST_USER}}/app/
          ssh -o StrictHostKeyChecking=no ${{secrets.AWS_HOST_USER}}@${{ secrets.AWS_EC2_IP_ADDRESS }} << 'EOF'
              cd ~/app
              set -a
              source .env
              set +a

              docker rm -v -f $(docker ps -qa) || true
              docker login ghcr.io -u ${{secrets.NAMESPACE}} -p ${{secrets.PERSONAL_ACCESS_TOKEN}}
              docker pull $BACKEND_IMAGE
              docker pull mongo:latest
              docker pull nginx:latest
              docker pull redis
              docker pull $FRONTEND_IMAGE
              docker-compose --env-file=.env -f docker-compose.prod.yml up --build -d
              docker logout
          EOF
